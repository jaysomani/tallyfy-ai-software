name: Test and Build Tallyfy.ai

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  packages: write
  
env:
  AWS_DB_URL: ${{ secrets.AWS_DB_URL || 'postgresql://dummy:dummy@localhost:5432/dummy' }}
  TALLY_URL: ${{ secrets.TALLY_URL || 'http://localhost:9000' }}
  COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_dummy' }}
  COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID || 'dummyclientid' }}
  COGNITO_REGION: ${{ secrets.COGNITO_REGION || 'us-east-1' }}
  TESTING: "true"
  GITHUB_ACTIONS: "true"

jobs:
  test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-github-actions-annotate-failures
        
    - name: Run tests
      run: |
        python -m pytest -v tests/test_cognito_auth.py tests/test_db_connector.py tests/test_tally_api.py tests/test_ledger_widget.py tests/test_login_widget.py
      env:
        AWS_DB_URL: ${{ secrets.AWS_DB_URL || 'postgresql://dummy:dummy@localhost:5432/dummy' }}
        TALLY_URL: ${{ secrets.TALLY_URL || 'http://localhost:9000' }}
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_dummy' }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID || 'dummyclientid' }}
        COGNITO_REGION: ${{ secrets.COGNITO_REGION || 'us-east-1' }}
        
    - name: Run coverage
      run: |
        python -m pytest --cov=backend tests/test_cognito_auth.py tests/test_db_connector.py tests/test_tally_api.py tests/test_ledger_widget.py tests/test_login_widget.py --cov-report=xml
      env:
        AWS_DB_URL: ${{ secrets.AWS_DB_URL || 'postgresql://dummy:dummy@localhost:5432/dummy' }}
        TALLY_URL: ${{ secrets.TALLY_URL || 'http://localhost:9000' }}
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_dummy' }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID || 'dummyclientid' }}
        COGNITO_REGION: ${{ secrets.COGNITO_REGION || 'us-east-1' }}
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install PyInstaller and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Create necessary files
      run: |
        # Create .env file
        echo AWS_DB_URL=${{ secrets.AWS_DB_URL || 'postgresql://dummy:dummy@localhost:5432/dummy' }} > .env
        echo TALLY_URL=${{ secrets.TALLY_URL || 'http://localhost:9000' }} >> .env
        echo COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_dummy' }} >> .env
        echo COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID || 'dummyclientid' }} >> .env
        echo COGNITO_REGION=${{ secrets.COGNITO_REGION || 'us-east-1' }} >> .env
        
        # Create empty local_storage.db if it doesn't exist
        echo. > local_storage.db
        
        # Create data directory structure if it doesn't exist
        mkdir -p data
        echo "This is a placeholder file" > data/placeholder.txt
        
    - name: Create PyInstaller spec file
      run: |
        echo "# -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('.env', '.'),
                ('local_storage.db', '.'),
                ('data', 'data')
            ],
            hiddenimports=['gui', 'gui.login_widget', 'gui.ledger_widget', 'gui.main_window', 'gui.user_icon', 
                          'backend', 'backend.cognito_auth', 'backend.config', 'backend.db_connector', 
                          'backend.tally_api', 'backend.local_db_connector', 'backend.hardware', 
                          'services', 'services.flask_server', 'services.websocket_server',
                          'utils', 'utils.logging_config',
                          'PyQt5', 'PyQt5.QtCore', 'PyQt5.QtWidgets', 'PyQt5.QtGui'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='TallyfyAI',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=True,  # Set to True for debugging
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        
        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='TallyfyAI',
        )" > TallyfyAI.spec
        
    - name: List files
      run: |
        dir
        dir data
      continue-on-error: true
        
    - name: Build application
      run: |
        pyinstaller TallyfyAI.spec
      env:
        AWS_DB_URL: ${{ secrets.AWS_DB_URL || 'postgresql://dummy:dummy@localhost:5432/dummy' }}
        TALLY_URL: ${{ secrets.TALLY_URL || 'http://localhost:9000' }}
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_dummy' }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID || 'dummyclientid' }}
        COGNITO_REGION: ${{ secrets.COGNITO_REGION || 'us-east-1' }}
        
    - name: Install NSIS
      run: |
        choco install nsis -y
        
    - name: Create NSIS installer script
      run: |
        echo '!include "MUI2.nsh"
        
        ; Application information
        Name "Tallyfy AI"
        OutFile "TallyfyAI_Setup.exe"
        InstallDir "$PROGRAMFILES\TallyfyAI"
        InstallDirRegKey HKCU "Software\TallyfyAI" ""
        
        ; Request application privileges
        RequestExecutionLevel admin
        
        ; Interface Settings
        !define MUI_ABORTWARNING
        !define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
        !define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"
        
        ; Pages
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        
        ; Languages
        !insertmacro MUI_LANGUAGE "English"
        
        ; Installer sections
        Section "Install"
            SetOutPath "$INSTDIR"
            
            ; Copy application files
            File /r "dist\TallyfyAI\*.*"
            
            ; Create shortcuts
            CreateDirectory "$SMPROGRAMS\TallyfyAI"
            CreateShortcut "$SMPROGRAMS\TallyfyAI\TallyfyAI.lnk" "$INSTDIR\TallyfyAI.exe"
            CreateShortcut "$DESKTOP\TallyfyAI.lnk" "$INSTDIR\TallyfyAI.exe"
            
            ; Create uninstaller
            WriteUninstaller "$INSTDIR\Uninstall.exe"
            
            ; Write registry keys for uninstaller
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI" "DisplayName" "Tallyfy AI"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI" "DisplayIcon" "$INSTDIR\TallyfyAI.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI" "Publisher" "TallyfyAI"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI" "DisplayVersion" "1.0.0"
        SectionEnd
        
        ; Uninstaller section
        Section "Uninstall"
            ; Remove application files
            RMDir /r "$INSTDIR\*.*"
            
            ; Remove shortcuts
            Delete "$SMPROGRAMS\TallyfyAI\TallyfyAI.lnk"
            RMDir "$SMPROGRAMS\TallyfyAI"
            Delete "$DESKTOP\TallyfyAI.lnk"
            
            ; Remove uninstaller
            Delete "$INSTDIR\Uninstall.exe"
            RMDir "$INSTDIR"
            
            ; Remove registry keys
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TallyfyAI"
        SectionEnd' > installer.nsi
        
    - name: Build installer
      run: |
        "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
        
    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: tallyfy-ai-installer
        path: TallyfyAI_Setup.exe
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v0.1.${{ github.run_number }}
        name: Build ${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          TallyfyAI_Setup.exe 